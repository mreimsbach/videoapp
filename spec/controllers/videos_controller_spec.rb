require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe VideosController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Video. As you add validations to Video, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {name: "also awesome", description: "to awesome for you"}
  }

  let(:invalid_attributes) {
    {name: ('a'*51), description: ('b'*1001)}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VideosController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all videos as @videos" do
      video = create(:video)
      get :index, {}, valid_session
      expect(assigns(:videos)).to eq([video])
    end
  end

  describe "GET #show" do
    it "assigns the requested video as @video" do
      video = create(:video)
      get :show, {:id => video.to_param}, valid_session
      expect(assigns(:video)).to eq(video)
    end
  end

  describe "GET #new" do
    # before (:example) do
    #   @user = create(:user, channel: create(:channel_with_courses))
    #   sign_in @user
    # end
    # it "renders new for user" do
    #   @user.channel.valid?
    #   get :new, {channel_id: @user.channel, course_id: @user.channel.courses.first}
    #   expect(response).to have_http_status(:success)
    # end

    it "shouldn't allow other users to add new videos" do
      user = create(:user, channel: create(:channel_with_courses))
      user2 = create(:user)
      sign_in user2
      get :new, {channel_id: user.channel, course_id: user.channel.courses.first}
      expect(response).to redirect_to(root_url)
    end
  end


  describe "GET #edit" do
    it "assigns the requested video as @video" do
      video = create(:video)
      get :edit, {:id => video.to_param}, valid_session
      expect(assigns(:video)).to eq(video)
    end
  end

  describe "POST #create" do
    before (:example) do
      @user = create(:user, channel: create(:channel_with_courses))
      sign_in @user
    end
    context "with valid params" do
      it "creates a new Video" do
        expect {
          post :create, {video: attributes_for(:video, user_id: @user), channel_id: @user.channel, course_id: @user.channel.courses.first}
        }.to change(Video, :count).by(1)
      end

      it "assigns a newly created video as @video" do
        post :create, {video: attributes_for(:video, user: @user),channel_id: @user.channel, course_id: @user.channel.courses.first }
        expect(assigns(:video)).to be_a(Video)
        expect(assigns(:video)).to be_persisted
      end

      it "redirects to the created video" do
        post :create, {video: attributes_for(:video, user: @user), channel_id: @user.channel, course_id: @user.channel.courses.first}
        expect(response).to redirect_to(Video.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved video as @video" do
        post :create, {video: attributes_for(:video, name: " "), channel_id: @user.channel, course_id: @user.channel.courses.first}
        expect(assigns(:video)).to be_a_new(Video)
      end

      it "re-renders the 'new' template" do
        post :create, {video: attributes_for(:video, name: " "), channel_id: @user.channel, course_id: @user.channel.courses.first}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    before (:example) do
      @user = create(:user, channel: create(:channel_with_courses))
      sign_in @user
    end
    context "with valid params" do
      let(:new_attributes) {
        {
          name: "foo foo",
          description: "bar, bar"
        }
      }

      it "updates the requested video" do
        video = create(:video)
        put :update, {:id => video.to_param, :video => new_attributes, channel_id: @user.channel, course_id: @user.channel.courses.first}
        video.reload
        expect(video.name).to eq(new_attributes[:name])
      end

      it "assigns the requested video as @video" do
        video = create(:video)
        put :update, {:id => video.to_param, :video => valid_attributes, channel_id: @user.channel, course_id: @user.channel.courses.first}
        expect(assigns(:video)).to eq(video)
      end

      it "redirects to the video" do
        video = create(:video)
        put :update, {:id => video.to_param, :video => valid_attributes, channel_id: @user.channel, course_id: @user.channel.courses.first}
        expect(response).to redirect_to(video)
      end
    end

    context "with invalid params" do
      it "assigns the video as @video" do
        video = create(:video)
        put :update, {:id => video.to_param, :video => invalid_attributes}
        expect(assigns(:video)).to eq(video)
      end

      it "re-renders the 'edit' template" do
        video = create(:video)
        put :update, {:id => video.to_param, :video => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    before (:example) do
      @user = create(:user, channel: create(:channel_with_courses))
      sign_in @user
    end
    it "destroys the requested video" do
      video = create(:video)
      expect {
        delete :destroy, {:id => video.to_param, channel_id: @user.channel, course_id: @user.channel.courses.first}
      }.to change(Video, :count).by(-1)
    end

    it "redirects to the videos list" do
      video = create(:video)
      delete :destroy, {:id => video.to_param, channel_id: @user.channel, course_id: @user.channel.courses.first}
      expect(response).to redirect_to(videos_url)
    end
  end
end
