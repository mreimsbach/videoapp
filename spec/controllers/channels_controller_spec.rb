require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ChannelsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Channel. As you add validations to Channel, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ChannelsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "lists all channel" do
      create(:channel)
      get :index
      expect(response).to render_template(:index)
    end
  end

  describe "GET #show" do
    it "shows a specific channel" do
      channel = create(:channel)
      get :show, id: channel
      expect(response).to render_template(:show)
    end
  end


  describe "GET #edit" do
    it "shows edit to the belonging user" do
      user = create(:user)
      sign_in user
      get :edit, id: user.channel
      expect(response).to render_template(:edit)
    end

    it "shouldn't show edit to other user" do
      user = create(:user)
      sign_in create(:user)
      get :edit, id: user.channel
      expect(response).to redirect_to(root_path)
    end

    it "shouldn't show edit to outlogged user" do
      user = create(:user)
      get :edit, id: user.channel
      expect(response).to redirect_to(new_user_session_path)
    end

  end

  # describe "POST #create" do
  #   context "with valid params" do
  #     it "creates a new Channel" do
  #       expect {
  #         post :create, {:channel => valid_attributes}, valid_session
  #       }.to change(Channel, :count).by(1)
  #     end
  #
  #     it "assigns a newly created channel as @channel" do
  #       post :create, {:channel => valid_attributes}, valid_session
  #       expect(assigns(:channel)).to be_a(Channel)
  #       expect(assigns(:channel)).to be_persisted
  #     end
  #
  #     it "redirects to the created channel" do
  #       post :create, {:channel => valid_attributes}, valid_session
  #       expect(response).to redirect_to(Channel.last)
  #     end
  #   end

    # context "with invalid params" do
    #   it "assigns a newly created but unsaved channel as @channel" do
    #     post :create, {:channel => invalid_attributes}, valid_session
    #     expect(assigns(:channel)).to be_a_new(Channel)
    #   end
    #
    #   it "re-renders the 'new' template" do
    #     post :create, {:channel => invalid_attributes}, valid_session
    #     expect(response).to render_template("new")
    #   end
    # end
#  end

  describe "PUT #update" do
      it "updates the requested channel as logged in user" do
        user = create(:user)
        sign_in user
        put :update, {:id => user.channel, :channel => {name: "new Name", description: "new detailed description" }}
        user.channel.reload
        expect(user.channel.name).to eq("new Name")
        expect(user.channel.description).to eq("new detailed description")
      end
      it "shouldn't updates the requested channel as other user" do
        user = create(:user)
        sign_in create(:user)
        put :update, {:id => user.channel, :channel => {name: "new Name", description: "new detailed description" }}
        expect(response).to redirect_to(root_path)
      end
  end

  # describe "DELETE #destroy" do
  #   it "destroys the requested channel" do
  #     channel = Channel.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => channel.to_param}, valid_session
  #     }.to change(Channel, :count).by(-1)
  #   end
  #
  #   it "redirects to the channels list" do
  #     channel = Channel.create! valid_attributes
  #     delete :destroy, {:id => channel.to_param}, valid_session
  #     expect(response).to redirect_to(channels_url)
  #   end
  # end

end
