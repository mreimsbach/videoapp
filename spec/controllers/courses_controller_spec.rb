require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CoursesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Course. As you add validations to Course, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
#    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
#    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CoursesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "lists all courses of a channel" do
      course = create(:course)
      get :index, {:channel_id => course.channel}
      expect(response).to render_template(:index)
    end
  end

  describe "GET #show" do
    it "shows a specific course" do
      course = create(:course)
      get :show, {:id => course, :channel_id => course.channel}
      expect(response).to render_template(:show)
    end
  end

  describe "GET #new" do
    it "gets a new course" do
      channel = create(:channel)
      get :new, {:channel_id => channel}
      expect(response).to render_template(:new)
    end
  end

  describe "GET #edit" do
    it "assigns the requested course as @course" do
      course = create(:course)
      get :edit, {:id => course, :channel_id => course.channel}
      expect(response).to render_template(:edit)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Course and redirects to the course" do
        channel = create(:channel)
        course_attributes = FactoryGirl.attributes_for(:course)
        post :create, {:course => course_attributes, :channel_id => channel }
        channel.reload
        expect(response).to redirect_to channel_course_path(channel_id: channel, id: channel.courses.first)
      end
    end
    context "with invalid params" do
      it "creates a new Course and redirects to the course" do
        channel = create(:channel)
        course_attributes = FactoryGirl.attributes_for(:course, name: nil)
        post :create, {:course => course_attributes, :channel_id => channel }
        expect(response).to render_template(:new)
      end
    end
  end

  describe "PUT #update" do
    render_views
    context "with valid params" do
      it "updates the requested course" do
        course = create(:course)
        put :update, {channel_id: course.channel, :id => course.id,
           :course => {name: "very awesome course",
           description: "very very awesome description"}}
        course.reload
        expect(course.name).to eq("very awesome course")
      end

      it "redirects to the course" do
        course = create(:course)
        put :update, {channel_id: course.channel, :id => course.id,
          :course => {name: "very awesome course",
          description: "very very awesome description"}}
        expect(response).to render_template(:show)
      end
    end

    context "with invalid params" do
      it "re-renders the 'edit' template" do
        course = create(:course)
        put :update, {channel_id: course.channel, :id => course.id,
          :course => {name: nil, description: "very very awesome description"}}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested course" do
      course = create(:course)
      delete :destroy, {:id => course, :channel_id => course.channel}
      expect(response).to redirect_to channel_courses_path
    end
   end

end
