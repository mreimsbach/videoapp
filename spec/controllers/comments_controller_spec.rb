require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CommentsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {text: ('A'*1000)}
  }

  let(:invalid_attributes) {
    {text: ('a'*1001)}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CommentsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #new" do
    it "assigns a new comment as @comment" do
      sign_in create(:user)
      video = create(:video)
      get :new, {:video_id => video}, valid_session
      expect(assigns(:comment)).to be_a_new(Comment)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      before (:example) do
        @user = create(:user, channel: create(:channel_with_courses))
        sign_in @user
        @video = create(:video)
      end
      it "creates a new Comment" do
        post :create, {:video_id => @video.id, :comment => valid_attributes}, valid_session
        @video.reload
        expect(@video.comments.count).to eq(1)
      end

      it "assigns a newly created comment as @comment" do
        post :create, {:video_id => @video.id, :comment => valid_attributes}, valid_session
        expect(assigns(:comment)).to be_a(Comment)
        expect(assigns(:comment)).to be_persisted
      end

      it "redirects to the created comment" do
        post :create, {:video_id => @video.id, :comment => valid_attributes}, valid_session
        expect(response).to redirect_to(video_path(@video))
      end
    end

    context "with invalid params" do
      before (:example) do
        @user = create(:user, channel: create(:channel_with_courses))
        sign_in @user
        @video = create(:video)
      end
      it "assigns a newly created but unsaved comment as @comment" do
        post :create, {:video_id => @video.id, :comment => invalid_attributes}, valid_session
        expect(assigns(:comment)).to be_a_new(Comment)
      end

      it "redirect to the 'video show' template" do
        post :create, {:video_id => @video.id, :comment => invalid_attributes}, valid_session
        expect(response).to redirect_to(video_path(@video))
      end
    end
    context "As logged out User" do
      before(:example) do
        @video = create(:video)
      end
      it "creates a new Comment" do
        post :create, {:video_id => @video.id, :comment => valid_attributes}, valid_session
        @video.reload
        expect(@video.comments.count).to eq(0)
      end

      it "redirects to log-in" do
        post :create, {:video_id => @video.id, :comment => valid_attributes}, valid_session
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  describe "DELETE #destroy" do
    context "As logged in User" do
      before (:example) do
        @user = create(:user, channel: create(:channel_with_courses))
        sign_in @user
      end
      it "destroys the requested comment" do
        comment = create(:comment)
        video = create(:video)
        video.comments << comment
        video.save
        comment.user_id = @user.id
        delete :destroy, {:id => comment, video_id: video}, valid_session
        video.reload
        expect(video.comments.count).to eq(0)
      end

      it "reloads the video" do
        comment = create(:comment)
        video = comment.video
        delete :destroy, {:id => comment.to_param, video_id: comment.video}, valid_session
        expect(response).to redirect_to(video_path(video))
      end
    end
    context "As logged out User" do
      it "destroys the requested comment" do
        comment = create(:comment)
        video = create(:video)
        video.comments << comment
        video.save
        delete :destroy, {:id => comment, video_id: video}, valid_session
        video.reload
        expect(video.comments.count).to eq(1)
      end

      it "redirects to sign_in" do
        comment = create(:comment)
        video = comment.video
        delete :destroy, {:id => comment.to_param, video_id: comment.video}, valid_session
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

end
